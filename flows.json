[
    {
        "id": "d2076010266e691e",
        "type": "tab",
        "label": "Alex",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "58d29239db35f478",
        "type": "tab",
        "label": "Tristan",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "741b416bb34222f3",
        "type": "socketcan-config",
        "interface": "can0"
    },
    {
        "id": "cf97968c7bc02d9e",
        "type": "mqtt-broker",
        "name": "",
        "broker": "raspberrypi.local",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "72f295af932710c5",
        "type": "mqtt out",
        "z": "d2076010266e691e",
        "name": "",
        "topic": "MowRo",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "cf97968c7bc02d9e",
        "x": 600,
        "y": 240,
        "wires": []
    },
    {
        "id": "cea5bf1a3215d8c6",
        "type": "mqtt in",
        "z": "d2076010266e691e",
        "name": "",
        "topic": "MowRo",
        "qos": "2",
        "datatype": "utf8",
        "broker": "cf97968c7bc02d9e",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 770,
        "y": 240,
        "wires": [
            [
                "ddd20385d637b753"
            ]
        ]
    },
    {
        "id": "37e1475948c27166",
        "type": "inject",
        "z": "d2076010266e691e",
        "name": "Forward",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Mode\":\"Forward\",\"Speed\":9,\"Angle\":0,\"Radius\":0}",
        "payloadType": "json",
        "x": 120,
        "y": 300,
        "wires": [
            [
                "72f295af932710c5"
            ]
        ]
    },
    {
        "id": "67a7a6ae29640778",
        "type": "socketcan-in",
        "z": "d2076010266e691e",
        "name": "socketcan-in",
        "config": "741b416bb34222f3",
        "x": 3250,
        "y": 180,
        "wires": []
    },
    {
        "id": "f1dd287a4485b272",
        "type": "json",
        "z": "d2076010266e691e",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": true,
        "x": 1350,
        "y": 220,
        "wires": [
            [
                "ff7ffd42f8a0c80a"
            ]
        ]
    },
    {
        "id": "bdd8a0509a42a633",
        "type": "buffer-maker",
        "z": "d2076010266e691e",
        "name": "",
        "specification": "spec",
        "specificationType": "ui",
        "items": [
            {
                "name": "Mode",
                "type": "uint8",
                "length": 1,
                "dataType": "msg",
                "data": "payload.binMode"
            },
            {
                "name": "Speed",
                "type": "uint8",
                "length": 1,
                "dataType": "msg",
                "data": "payload.Speed"
            },
            {
                "name": "ShiftAngle",
                "type": "uint8",
                "length": 1,
                "dataType": "msg",
                "data": "payload.ShiftAngle"
            },
            {
                "name": "Angle",
                "type": "uint8",
                "length": 1,
                "dataType": "msg",
                "data": "payload.Angle"
            },
            {
                "name": "Radius",
                "type": "uint8",
                "length": 1,
                "dataType": "msg",
                "data": "payload.Radius"
            }
        ],
        "swap1": "",
        "swap2": "",
        "swap3": "",
        "swap1Type": "swap",
        "swap2Type": "swap",
        "swap3Type": "swap",
        "msgProperty": "payload.data",
        "msgPropertyType": "str",
        "x": 2610,
        "y": 180,
        "wires": [
            [
                "78f81452ce40e35b"
            ]
        ]
    },
    {
        "id": "282614a17b9b693f",
        "type": "mqtt in",
        "z": "d2076010266e691e",
        "name": "",
        "topic": "Feedback",
        "qos": "2",
        "datatype": "auto",
        "broker": "cf97968c7bc02d9e",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 100,
        "y": 820,
        "wires": [
            [
                "cc029c6b5bf83e99"
            ]
        ]
    },
    {
        "id": "ff7ffd42f8a0c80a",
        "type": "function",
        "z": "d2076010266e691e",
        "name": "switchMode",
        "func": "switch (msg.payload.Mode)\n{\ncase \"Stop\":\n    \n    msg.payload.binMode=0b11111111\n    return msg;\n    \ncase \"Forward\":\n\n    msg.payload.binMode=0b00000001\n    return msg;  \n    \ncase \"Backward\":\n\n     msg.payload.binMode=0b00000010\n    return msg; \n\ncase \"RightTurnForward\":\n\n     msg.payload.binMode=0b00000011\n    return msg;\n    \ncase \"RightTurnBackward\":\n\n      msg.payload.binMode=0b00000100\n    return msg;\n    \ncase \"LeftTurnForward\":\n\n    msg.payload.binMode=0b00000101\n    return msg;\n    \ncase \"LeftTurnBackward\":\n\n     msg.payload.binMode=0b00000110\n    return msg;\n    \ncase \"ClockwiseRotation\":\n\n    msg.payload.binMode=0b00000111\n    return msg;\n    \ncase \"CounterClockwiseRotation\":\n\n    msg.payload.binMode=0b00001000\n    return msg;\n\ndefault:\n    msg.payload = \"Mode nicht definiert. Bitte Eingabeparameter ueberpruefen!\"\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1490,
        "y": 220,
        "wires": [
            [
                "0fac06133517bace"
            ]
        ]
    },
    {
        "id": "ead899817251434e",
        "type": "function",
        "z": "d2076010266e691e",
        "name": "calculateSpeed",
        "func": "// Convert Speed from km/h in cm/s max. value 9.14\nmsg.payload.Speed=Math.round(msg.payload.Speed*1000/36)\nif (msg.payload.Speed > 255)\n{\n    msg.payload.Speed = 255\n}\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1900,
        "y": 200,
        "wires": [
            [
                "5f62c78599bf213b"
            ]
        ]
    },
    {
        "id": "e1259c18c1151d14",
        "type": "inject",
        "z": "d2076010266e691e",
        "name": "Backward",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Mode\":\"Backward\",\"Speed\":0,\"Angle\":0,\"Radius\":0}",
        "payloadType": "json",
        "x": 120,
        "y": 360,
        "wires": [
            [
                "72f295af932710c5"
            ]
        ]
    },
    {
        "id": "67f4151c435f8917",
        "type": "inject",
        "z": "d2076010266e691e",
        "name": "RightTurnForward",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Mode\":\"RightTurnForward\",\"Speed\":9.85697,\"Angle\":489,\"Radius\":1.25848}",
        "payloadType": "json",
        "x": 150,
        "y": 420,
        "wires": [
            [
                "72f295af932710c5"
            ]
        ]
    },
    {
        "id": "dc1371fec7cf2538",
        "type": "inject",
        "z": "d2076010266e691e",
        "name": "RightTurnBackward",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Mode\":\"RightTurnBackward\",\"Speed\":0,\"Angle\":0,\"Radius\":0}",
        "payloadType": "json",
        "x": 150,
        "y": 480,
        "wires": [
            [
                "72f295af932710c5"
            ]
        ]
    },
    {
        "id": "9c8af845381ef642",
        "type": "inject",
        "z": "d2076010266e691e",
        "name": "LeftTurnForward",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Mode\":\"LeftTurnForward\",\"Speed\":4.87945,\"Angle\":150,\"Radius\":3}",
        "payloadType": "json",
        "x": 140,
        "y": 540,
        "wires": [
            [
                "72f295af932710c5"
            ]
        ]
    },
    {
        "id": "844e45e3164ce50c",
        "type": "inject",
        "z": "d2076010266e691e",
        "name": "LeftTurnBackward",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Mode\":\"LeftTurnBackward\",\"Speed\":0,\"Angle\":0,\"Radius\":0}",
        "payloadType": "json",
        "x": 150,
        "y": 600,
        "wires": [
            [
                "72f295af932710c5"
            ]
        ]
    },
    {
        "id": "69b04c470b8770dc",
        "type": "inject",
        "z": "d2076010266e691e",
        "name": "ClockwiseRotation",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Mode\":\"ClockwiseRotation\",\"Speed\":0,\"Angle\":0,\"Radius\":0}",
        "payloadType": "json",
        "x": 150,
        "y": 660,
        "wires": [
            [
                "72f295af932710c5"
            ]
        ]
    },
    {
        "id": "cdebb0984fbb19c2",
        "type": "inject",
        "z": "d2076010266e691e",
        "name": "CounterClockwiseRotation",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Mode\":\"CounterClockwiseRotation\",\"Speed\":0,\"Angle\":0,\"Radius\":0}",
        "payloadType": "json",
        "x": 170,
        "y": 720,
        "wires": [
            [
                "72f295af932710c5"
            ]
        ]
    },
    {
        "id": "dccdbedfba9fefc3",
        "type": "inject",
        "z": "d2076010266e691e",
        "name": "Stop",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "topic": "",
        "payload": "{\"Mode\":\"Stop\",\"Speed\":0,\"Angle\":0,\"Radius\":0}",
        "payloadType": "json",
        "x": 110,
        "y": 240,
        "wires": [
            [
                "72f295af932710c5"
            ]
        ]
    },
    {
        "id": "5f62c78599bf213b",
        "type": "function",
        "z": "d2076010266e691e",
        "name": "Angle",
        "func": "if (msg.payload.Angle > 360)\n{\n    msg.payload = \"Winkel darf maximal 360 Grad gross sein!\"\n}\nelse if (361 > msg.payload.Angle > 255)\n{\n    msg.payload.ShiftAngle = 1\n    msg.payload.Angle = msg.payload.Angle-256\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2050,
        "y": 200,
        "wires": [
            [
                "3aeee01204342351"
            ]
        ]
    },
    {
        "id": "3833bd0a23d1ad42",
        "type": "function",
        "z": "d2076010266e691e",
        "name": "calculateRadius",
        "func": "//convert radius from m to cm, max. value = 2.55m\n\nmsg.payload.Radius = Math.round(msg.payload.Radius*100)\n\nif(msg.payload.Radius > 255)\n{\n    msg.payload.Radius = 255\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2440,
        "y": 180,
        "wires": [
            [
                "bdd8a0509a42a633"
            ]
        ]
    },
    {
        "id": "78f81452ce40e35b",
        "type": "function",
        "z": "d2076010266e691e",
        "name": "receiveDriveData",
        "func": "msg.payload=\n{\n    \"canfd\":false,\n    \"ext\":false,\n    \"rtr\":false,\n    \"canid\":11,\n    \"dlc\":5,\n    \"data\":[msg.payload.data[0],msg.payload.data[1],msg.payload.data[2],msg.payload.data[3],msg.payload.data[4]]\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2790,
        "y": 180,
        "wires": [
            [
                "ca33282c2dc2a957",
                "67a7a6ae29640778"
            ]
        ]
    },
    {
        "id": "0fac06133517bace",
        "type": "switch",
        "z": "d2076010266e691e",
        "name": "ErrorHandling_Mode",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "Mode nicht definiert. Bitte Eingabeparameter ueberpruefen!",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Mode nicht definiert. Bitte Eingabeparameter ueberpruefen!",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1680,
        "y": 220,
        "wires": [
            [
                "ead899817251434e"
            ],
            [
                "2053b05bf69140f8"
            ]
        ]
    },
    {
        "id": "2053b05bf69140f8",
        "type": "mqtt out",
        "z": "d2076010266e691e",
        "name": "",
        "topic": "Feedback",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "cf97968c7bc02d9e",
        "x": 1880,
        "y": 240,
        "wires": []
    },
    {
        "id": "f59ed71297a77f76",
        "type": "inject",
        "z": "d2076010266e691e",
        "name": "ErrorTest_Mode",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Mope\":\"Stop\",\"Speed\":2,\"Angle\":0,\"Radius\":0}",
        "payloadType": "json",
        "x": 140,
        "y": 180,
        "wires": [
            [
                "72f295af932710c5"
            ]
        ]
    },
    {
        "id": "cc029c6b5bf83e99",
        "type": "debug",
        "z": "d2076010266e691e",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 350,
        "y": 820,
        "wires": []
    },
    {
        "id": "3aeee01204342351",
        "type": "switch",
        "z": "d2076010266e691e",
        "name": "ErrorHandling_Angle",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "Winkel darf maximal 360 Grad gross sein!",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Winkel darf maximal 360 Grad gross sein!",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2220,
        "y": 200,
        "wires": [
            [
                "3833bd0a23d1ad42"
            ],
            [
                "7b1d39b3bc82d727"
            ]
        ]
    },
    {
        "id": "7b1d39b3bc82d727",
        "type": "mqtt out",
        "z": "d2076010266e691e",
        "name": "",
        "topic": "Feedback",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "cf97968c7bc02d9e",
        "x": 2420,
        "y": 220,
        "wires": []
    },
    {
        "id": "8258439bf7759f91",
        "type": "switch",
        "z": "d2076010266e691e",
        "name": "ErrorHandling_Syntax",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "Syntax ueberpruefen!",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Syntax ueberpruefen!",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1160,
        "y": 240,
        "wires": [
            [
                "f1dd287a4485b272"
            ],
            [
                "96a2328dc4d58d28"
            ]
        ]
    },
    {
        "id": "96a2328dc4d58d28",
        "type": "mqtt out",
        "z": "d2076010266e691e",
        "name": "",
        "topic": "Feedback",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "cf97968c7bc02d9e",
        "x": 1360,
        "y": 280,
        "wires": []
    },
    {
        "id": "ddd20385d637b753",
        "type": "function",
        "z": "d2076010266e691e",
        "name": "",
        "func": "Mode = (msg.payload.indexOf(\"\\\"Mode\\\":\"));\nSpeed = (msg.payload.indexOf(\",\\\"Speed\\\":\"))\nAngle = (msg.payload.indexOf(\",\\\"Angle\\\":\"));\nRadius = (msg.payload.indexOf(\",\\\"Radius\\\":\"));\n\nif ((Mode==-1) || (Speed==-1) || (Angle==-1) ||(Radius==-1) )\n{\nmsg.payload = \"Syntax ueberpruefen!\"\n}\n\nfor (i = Speed + 9 ; i < Angle; i++) \n{\n   \n   if (isNaN(msg.payload[i]) == true)\n   {\n        if(msg.payload[i] != \".\")\n        {\n            msg.payload = \"Syntax ueberpruefen!\"\n            return msg\n        }\n   }\n    \n}\n\nfor (i = Angle + 9 ; i < Radius; i++) \n{\n   \n   if (isNaN(msg.payload[i]) == true)\n   {\n        if(msg.payload[i] != \".\")\n        {\n            msg.payload = \"Syntax ueberpruefen!\"\n            return msg\n        }\n   }\n    \n}\n\nfor (i = Radius + 10 ; i < msg.payload.length-1; i++) \n{\n   \n   if (isNaN(msg.payload[i]) == true)\n   {\n        if(msg.payload[i] != \".\")\n        {\n            msg.payload = \"Syntax ueberpruefen!\"\n            return msg\n        }\n   }\n    \n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 240,
        "wires": [
            [
                "8258439bf7759f91"
            ]
        ]
    },
    {
        "id": "842fc9886fcfd334",
        "type": "function",
        "z": "d2076010266e691e",
        "name": "",
        "func": "if(flow.get(\"FeedbackDriveMode\") != msg.payload.data[0])\n{\n    msg.payload = \"Zurueckgegebener DriveMode '\" + flow.get(\"FeedbackDriveMode\").toString() + \"' stimmt nicht mit dem geforderten ueberein!\"\n    return msg;\n}\nif(flow.get(\"FeedbackDriveSpeed\") != msg.payload.data[1])\n{\n    msg.payload = \"Zurueckgegebene Geschwindigkeit '\" + flow.get(\"FeedbackDriveSpeed\").toString() + \"' stimmt nicht mit der geforderten ueberein!\"\n    return msg;\n}\nif(flow.get(\"FeedbackDriveShiftedAngle\") != msg.payload.data[2] || flow.get(\"FeedbackDriveAngle\") != msg.payload.data[3])\n{\n    msg.payload = \"Zurueckgegebener Winkel '\" + parseFloat((flow.get(\"FeedbackDriveShiftedAngle\")+flow.get(\"FeedbackDriveAngle\"))).toString() + \"' stimmt nicht mit dem geforderten ueberein!\"\n    return msg;\n}\nif(flow.get(\"FeedbackDriveRadius\") != msg.payload.data[4])\n{\n    msg.payload = \"Zurueckgegebener Radius '\" + flow.get(\"FeedbackDriveRadius\").toString() + \"' stimmt nicht mit dem geforderten ueberein!\"\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3460,
        "y": 60,
        "wires": [
            [
                "7ab94a45d27316ae"
            ]
        ]
    },
    {
        "id": "ca33282c2dc2a957",
        "type": "function",
        "z": "d2076010266e691e",
        "name": "",
        "func": "flow.set(\"InputMode\", msg.payload.data[0])\nflow.set(\"InputSpeed\", msg.payload.data[1])\nflow.set(\"InputShiftedAngle\", msg.payload.data[2])\nflow.set(\"InputAngle\", msg.payload.data[3])\nflow.set(\"InputRadius\", msg.payload.data[4])\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3040,
        "y": 60,
        "wires": [
            [
                "a52bb468f67e201e"
            ]
        ]
    },
    {
        "id": "8ce13fc76e21917f",
        "type": "socketcan-out",
        "z": "d2076010266e691e",
        "name": "socketcan-out",
        "config": "741b416bb34222f3",
        "x": 3480,
        "y": 180,
        "wires": [
            [
                "3de04da96d491c54"
            ]
        ]
    },
    {
        "id": "3de04da96d491c54",
        "type": "function",
        "z": "d2076010266e691e",
        "name": "FilterCANID_11",
        "func": "if (msg.payload.canid == 11)\n{\n    flow.set(\"FeedbackDriveMode\", msg.payload.data[0])\n    flow.set(\"FeedbackDriveSpeed\", msg.payload.data[1])\n    flow.set(\"FeedbackDriveShiftAngle\", msg.payload.data[2])\n    flow.set(\"FeedbackDriveAngle\", msg.payload.data[3])\n    flow.set(\"FeedbackDriveRadius\", msg.payload.data[4])\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3880,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "a52bb468f67e201e",
        "type": "delay",
        "z": "d2076010266e691e",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 3280,
        "y": 60,
        "wires": [
            [
                "842fc9886fcfd334"
            ]
        ]
    },
    {
        "id": "4df23f6f41e4a3de",
        "type": "inject",
        "z": "d2076010266e691e",
        "name": "Stop",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "5.5",
        "topic": "",
        "payload": "{\"canfd\":false,\"ext\":false,\"rtr\":false,\"canid\":11,\"dlc\":5,\"data\":[255,0,0,0,0]}",
        "payloadType": "json",
        "x": 3650,
        "y": 140,
        "wires": [
            [
                "3de04da96d491c54"
            ]
        ]
    },
    {
        "id": "ce7e925f290030d0",
        "type": "config",
        "z": "d2076010266e691e",
        "name": "Cache",
        "properties": [
            {
                "p": "FeedbackDriveMode",
                "pt": "flow",
                "to": "",
                "tot": "str"
            },
            {
                "p": "FeedbackDriveSpeed",
                "pt": "flow",
                "to": "",
                "tot": "num"
            },
            {
                "p": "FeedbackDriveShiftedAngle",
                "pt": "flow",
                "to": "",
                "tot": "num"
            },
            {
                "p": "FeedbackDriveAngle",
                "pt": "flow",
                "to": "",
                "tot": "str"
            },
            {
                "p": "FeedbackDriveRadius",
                "pt": "flow",
                "to": "",
                "tot": "num"
            },
            {
                "p": "InputMode",
                "pt": "flow",
                "to": "",
                "tot": "str"
            },
            {
                "p": "InputSpeed",
                "pt": "flow",
                "to": "",
                "tot": "num"
            },
            {
                "p": "InputShiftedAngle",
                "pt": "flow",
                "to": "",
                "tot": "num"
            },
            {
                "p": "InputAngle",
                "pt": "flow",
                "to": "",
                "tot": "num"
            },
            {
                "p": "InputRadius",
                "pt": "flow",
                "to": "",
                "tot": "num"
            }
        ],
        "active": true,
        "x": 110,
        "y": 120,
        "wires": []
    },
    {
        "id": "7ab94a45d27316ae",
        "type": "mqtt out",
        "z": "d2076010266e691e",
        "name": "",
        "topic": "Feedback",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "cf97968c7bc02d9e",
        "x": 3660,
        "y": 60,
        "wires": []
    },
    {
        "id": "7a6ee82c5172bf43",
        "type": "inject",
        "z": "58d29239db35f478",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 60,
        "wires": [
            [
                "6848bbddd77340d5"
            ]
        ]
    },
    {
        "id": "6580f3eb06b185f9",
        "type": "debug",
        "z": "58d29239db35f478",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1770,
        "y": 60,
        "wires": []
    },
    {
        "id": "6848bbddd77340d5",
        "type": "function",
        "z": "58d29239db35f478",
        "name": "",
        "func": "msg.payload=\n{\n    \"canfd\":false,\n    \"ext\":false,\n    \"rtr\":false,\n    \"canid\":4,\n    \"dlc\":5,\n    \"data\":[1,2,3,4,5]\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 60,
        "wires": [
            [
                "5a7c1fa1e7baf462"
            ]
        ]
    },
    {
        "id": "5a7c1fa1e7baf462",
        "type": "socketcan-in",
        "z": "58d29239db35f478",
        "name": "socketcan-in",
        "config": "741b416bb34222f3",
        "x": 590,
        "y": 60,
        "wires": []
    },
    {
        "id": "ebdf8292ba882b2a",
        "type": "socketcan-out",
        "z": "58d29239db35f478",
        "name": "socketcan-out",
        "config": "741b416bb34222f3",
        "x": 790,
        "y": 60,
        "wires": [
            [
                "4341aedc55b58e8c"
            ]
        ]
    },
    {
        "id": "f9f2cf3f875d0823",
        "type": "buffer-maker",
        "z": "58d29239db35f478",
        "name": "CanID-Filter",
        "specification": "spec",
        "specificationType": "ui",
        "items": [
            {
                "name": "item1",
                "type": "uint8",
                "length": 1,
                "dataType": "msg",
                "data": "payload.canid"
            }
        ],
        "swap1": "",
        "swap2": "",
        "swap3": "",
        "swap1Type": "swap",
        "swap2Type": "swap",
        "swap3Type": "swap",
        "msgProperty": "payload",
        "msgPropertyType": "str",
        "x": 1350,
        "y": 60,
        "wires": [
            [
                "6580f3eb06b185f9"
            ]
        ]
    },
    {
        "id": "037d420644049e8f",
        "type": "buffer-maker",
        "z": "58d29239db35f478",
        "name": "Can_Data",
        "specification": "spec",
        "specificationType": "ui",
        "items": [
            {
                "name": "item1",
                "type": "uint8",
                "length": 5,
                "dataType": "msg",
                "data": "payload.data"
            }
        ],
        "swap1": "",
        "swap2": "",
        "swap3": "",
        "swap1Type": "swap",
        "swap2Type": "swap",
        "swap3Type": "swap",
        "msgProperty": "payload",
        "msgPropertyType": "str",
        "x": 1340,
        "y": 120,
        "wires": [
            [
                "6580f3eb06b185f9"
            ]
        ]
    },
    {
        "id": "1522fe0eb22014be",
        "type": "inject",
        "z": "58d29239db35f478",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 120,
        "wires": [
            [
                "5a7c1fa1e7baf462"
            ]
        ]
    },
    {
        "id": "e05f1b8c31bca3e0",
        "type": "inject",
        "z": "58d29239db35f478",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "4341aedc55b58e8c",
        "type": "function",
        "z": "58d29239db35f478",
        "name": "",
        "func": "if (msg.payload.canid == (4 || 5 || 6))\n{\n   return msg; \n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 60,
        "wires": [
            [
                "f9f2cf3f875d0823",
                "037d420644049e8f"
            ]
        ]
    }
]